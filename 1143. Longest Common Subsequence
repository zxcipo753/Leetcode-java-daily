class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();

        // 创建一个二维数组 dp，dp[i][j] 表示 text1 的前 i 个字符与 text2 的前 j 个字符的最长公共子序列的长度
        int[][] dp = new int[m + 1][n + 1];

        // 遍历两个字符串，填充 dp 数组
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                // 当前字符相同时，dp[i][j] 等于 dp[i-1][j-1] 的值加上 1
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    // 当前字符不相同时，dp[i][j] 等于 dp[i-1][j] 和 dp[i][j-1] 的较大值
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        // 返回 dp 数组右下角的值，即 text1 和 text2 的最长公共子序列的长度
        return dp[m][n];
    }
}
