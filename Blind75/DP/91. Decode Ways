class Solution {
    public int numDecodings(String s) {
        // 边界条件检查：如果字符串为空，长度为0，或者第一个字符为'0'，则无法解码，返回0
        if (s == null || s.length() == 0 || s.charAt(0) == '0') {
            return 0;
        }

        int n = s.length();
        // 动态规划数组，dp[i] 表示前 i 个字符的解码方法数
        int[] dp = new int[n + 1];
        // 空字符串有一种解码方法
        dp[0] = 1;
        // 如果第一个字符不为'0'，则有一种解码方法，否则为0
        dp[1] = s.charAt(0) != '0' ? 1 : 0;

        // 从第二个字符开始遍历字符串，计算每个位置的解码方法数
        for (int i = 2; i <= n; i++) {
            // 取一个字符，表示当前字符
            int oneDigit = Integer.parseInt(s.substring(i - 1, i));
            // 取两个字符，表示当前字符和前一个字符组成的两位数
            int twoDigits = Integer.parseInt(s.substring(i - 2, i));

            // 如果一个字符的值在 1 到 9 之间，则它是一个有效的解码，累加前一个位置的解码方法数
            if (oneDigit >= 1 && oneDigit <= 9) {
                dp[i] += dp[i - 1];
            }
            // 如果两个字符的值在 10 到 26 之间，则它是一个有效的解码，累加前两个位置的解码方法数
            if (twoDigits >= 10 && twoDigits <= 26) {
                dp[i] += dp[i - 2];
            }
        }

        // 返回整个字符串的解码方法数
        return dp[n];
    }
}
