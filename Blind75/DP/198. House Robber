class Solution {
    public int rob(int[] nums) {
        // 边界条件
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0];
        }

        int n = nums.length;
        int[] dp = new int[n];
        
        // 初始化状态
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        // 计算每一间房屋的最大抢劫金额
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);
        }

        return dp[n - 1];
    }

}

/*
解题思路：
这个问题可以通过动态规划来解决。我们定义一个数组 dp，其中 dp[i] 表示到第 i 间房屋为止，能够抢劫到的最大金额。

状态转移方程：
如果我们抢劫第 i 间房屋，那么我们不能抢劫第 i-1 间房屋，此时我们抢劫到的金额为 nums[i] + dp[i-2]。
如果我们不抢劫第 i 间房屋，那么我们抢劫到的金额为 dp[i-1]。
所以状态转移方程为：
dp[i]=max(dp[i−1],nums[i]+dp[i−2])

初始化：
dp[0] = nums[0]，表示只有一间房屋时的最大抢劫金额。
dp[1] = \max(nums[0], nums[1])，表示两间房屋时的最大抢劫金额。

详细解说：
边界条件处理：

如果 nums 为空或长度为0，返回0。
如果 nums 长度为1，直接返回 nums[0]。
初始化：

dp[0] = nums[0]：只有一间房屋时，只能抢劫这一间。
dp[1] = Math.max(nums[0], nums[1])：两间房屋时，选择抢劫金额较大的一间。
状态转移：

从第三间房屋开始，计算每一间房屋的最大抢劫金额。
dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2])：比较两种情况，选择金额较大的那种。
结果：

最后 dp[n-1] 就是能够抢劫到的最大金额。 */
