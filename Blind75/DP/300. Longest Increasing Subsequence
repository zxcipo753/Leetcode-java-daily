class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1); // 初始化 dp 数组为 1，因为每个元素自身都是一个递增子序列

        // 遍历数组
        for (int i = 0; i < n; i++) {
            // 对于每个元素 nums[i]，在前面找出所有小于 nums[i] 的元素 nums[j]，更新 dp[i]
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    //dp[i] = Math.max(dp[i], dp[j] + 1) 的含义是：对于每个元素 nums[i]，找到它之前所有小于它的元素 nums[j]，并计算以 nums[j] 结尾的最长递增子序列长度 dp[j]，然后将 dp[j] 加上当前元素 nums[i] 形成的子序列长度 1（即 dp[j] + 1），然后将 dp[i] 的值更新为 dp[i] 和 dp[j] + 1 中的较大值。
                }
            }
        }

        // 遍历 dp 数组，找出最长递增子序列的长度
        int maxLength = 1;
        for (int length : dp) {
            maxLength = Math.max(maxLength, length);
        }

        return maxLength;
    }
}
