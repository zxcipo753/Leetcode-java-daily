动态规划（Dynamic Programming，简称DP）是一种解决最优化问题的算法策略。它通过将复杂问题分解为更小的子问题，并保存这些子问题的解决方案，以避免重复计算，从而提高效率。动态规划通常用于解决有重叠子问题和最优子结构性质的问题。


什么时候用到动态规划：动态规划通过保存子问题的结果来避免重复计算



动态规划的两个关键性质：
最优子结构：问题的最优解包含子问题的最优解。
重叠子问题：子问题之间会重复出现。
动态规划的基本步骤：
定义状态：确定动态规划的状态表示，即如何用变量表示一个子问题的解。
状态转移方程：找出状态之间的关系，通常以递推公式的形式表示。
初始化状态：确定边界条件或初始状态。
计算结果：利用状态转移方程，从初始状态逐步计算出最终结果。
举一个经典的动态规划问题作为示例：“爬楼梯”问题。

题目描述：
一个人可以每次爬1级或2级台阶，问他爬到第n级台阶有多少种不同的方式？

解题思路：
定义状态：设dp[i]表示爬到第i级台阶的方法数。
状态转移方程：dp[i] = dp[i-1] + dp[i-2]，因为爬到第i级台阶可以从第i-1级和第i-2级台阶跳一步上来。
初始化状态：dp[0] = 1（不需要爬），dp[1] = 1（只能一步）。
计算结果：根据状态转移方程，从初始状态计算到dp[n]。
Java代码示例：
java
Copy code
public class ClimbingStairs {
    public int climbStairs(int n) {
        // 边界条件
        if (n <= 1) {
            return 1;
        }

        // 初始化状态
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;

        // 计算每一级台阶的方法数
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }
}
