/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 // 这个解法使用了深度优先搜索(DFS)的策略，它递归地遍历了两棵树的每一个节点来判断这两棵树是否相同。
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // 如果两个节点都是空，返回true
        if (p == null && q == null) {
            return true;
        }

        // 如果一个节点是空而另一个不是，返回false
        if (p == null || q == null) {
            return false;
        }

        // 如果两个节点的值不相等，返回false
        if (p.val != q.val) {
            return false;
        }

        // 递归判断左子树和右子树
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
