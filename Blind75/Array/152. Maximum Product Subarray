class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        // 初始化最大乘积和最小乘积为第一个元素
        int maxProduct = nums[0];
        int minProduct = nums[0];

        // 初始化结果为第一个元素
        int result = nums[0];

        // 从第二个元素开始遍历数组
        for (int i = 1; i < n; i++) {
            // 如果当前元素是负数，交换最大乘积和最小乘积
            if (nums[i] < 0) {
                int temp = maxProduct;
                maxProduct = minProduct;
                minProduct = temp;
            }

            // 更新最大乘积和最小乘积
            maxProduct = Math.max(nums[i], maxProduct * nums[i]);
            minProduct = Math.min(nums[i], minProduct * nums[i]);

            // 更新结果为当前最大乘积和结果中的较大值
            result = Math.max(result, maxProduct);
        }

        return result;
    }
}
