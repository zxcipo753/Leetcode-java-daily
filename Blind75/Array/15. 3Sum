import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        int n = nums.length;

        // Sort the array to easily handle duplicates and for two-pointer approach
        Arrays.sort(nums);

        for (int i = 0; i < n - 2; i++) {
            // Skip duplicate elements
            if (i > 0 && nums[i] == nums[i - 1])
                continue;

            int target = -nums[i]; // Set the target sum to find with two-pointer approach
            int left = i + 1; // Pointer for the element to the right of nums[i]
            int right = n - 1; // Pointer for the rightmost element

            while (left < right) {
                int sum = nums[left] + nums[right];

                if (sum == target) {
                    // Found a valid triplet
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));

                    // Skip duplicate elements
                    while (left < right && nums[left] == nums[left + 1])
                        left++;
                    while (left < right && nums[right] == nums[right - 1])
                        right--;

                    // Move both pointers inward
                    left++;
                    right--;
                } else if (sum < target) {
                    // Sum is too small, move the left pointer to increase the sum
                    left++;
                } else {
                    // Sum is too large, move the right pointer to decrease the sum
                    right--;
                }
            }
        }

        return result;
    }
}
