class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return -1; // 如果数组为空，返回-1
        int start = 0;
        int end = nums.length - 1;

        while(start <= end) {
            int mid = start + (end - start) / 2; // 找到中点
            if(nums[mid] == target) return mid; // 如果中点的值就是目标值，直接返回中点的索引

            // 判断左半部分是否有序
            if(nums[start] <= nums[mid]) {
                // 如果目标值在左半部分的范围内，将结束点移到中点左边
                if(target >= nums[start] && target < nums[mid]) {
                    end = mid - 1;
                }
                // 否则，将开始点移到中点右边
                else {
                    start = mid + 1;
                }
            }
            else {
                // 如果目标值在右半部分的范围内，将开始点移到中点右边
                if(target > nums[mid] && target <= nums[end]) {
                    start = mid + 1;
                }
                // 否则，将结束点移到中点左边
                else {
                    end = mid - 1;
                }
            }
        }

        // 如果循环结束还没有找到目标值，返回-1
        return -1;
    }
}
